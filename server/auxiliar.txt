

//SELECT
app.get('/api/get_user', (req,res) => {

    const sqlSelect = "SELECT * FROM users";
    db.query(sqlSelect, (err,result)  => {
       
        //enviar para o front end
        res.send(result)


        console.log(result)

    });

});



//INSERT
app.post('/api/insert_user', (req,res) => {
  
    const nome = req.body.nome_backend
    const idade = req.body.idade_backend

    const sqlInsert = "INSERT INTO users (nome,idade) VALUES(?,?);"
    db.query(sqlInsert, [nome,idade], (err,result)  => {
        // Se foi sucedida dá conselog
        console.log(err)

    });

});



//UPDATE
app.put('/api/update_user', (req,res) => {
  
    

    const sqlUpdate = "UPDATE users SET nome='updated' WHERE id=6"
    db.query(sqlUpdate, (err,result)  => {
        // Se foi sucedida dá conselog
        console.log(err)

    });

});


//DELETE
app.delete('/api/delete/', (req,res) => {
  
    const nome = req.body.nome_backend
    console.log(nome)
    const sqlDelete = "DELETE FROM users WHERE nome=?"
    db.query(sqlDelete, nome, (err,result)  => {
        // Se foi sucedida dá conselog
        

    });

});




app.listen(3001, () =>{
    console.log('running on port 3001');
});










// npm run devStart

// INSERIR CENAS NA DATABASE
/*
    app.post('/api/insert_user', (req,res) => {
  
    const nome = req.body.nome_backend
    const idade = req.body.idade_backend

    const sqlInsert = "INSERT INTO users (nome,idade) VALUES(?,?);"
    db.query(sqlInsert, [nome,idade], (err,result)  => {
        // Se foi sucedida dá conselog
        console.log(err)

    });

});
*/



//Meter a correr o express
const express = require('express');
const app = express();

//Meter a correr mysql
const mysql = require('mysql');

//Conectar base de dados
const db = mysql.createPool({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'projeto final',
});

//Manipular JSON format
const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({extended: true}));
app.use(express.json());

//Erro do cors

const cors = require('cors');
app.use(cors());








//SELECT
app.get('/api/get_user', (req,res) => {

    const sqlSelect = "SELECT * FROM users";
    db.query(sqlSelect, (err,result)  => {
       
        //enviar para o front end
        res.send(result)


        console.log(result)

    });

});


//INSERT
app.post('/api/insert_user', (req,res) => {
  
    const nome = req.body.nome_backend
    const idade = req.body.idade_backend

    const sqlInsert = "INSERT INTO users (nome,idade) VALUES(?,?);"
    db.query(sqlInsert, [nome,idade], (err,result)  => {
        // Se foi sucedida dá conselog
        console.log(err)

    });

});



//UPDATE
app.put('/api/update_user', (req,res) => {
  
    

    const sqlUpdate = "UPDATE users SET nome='updated' WHERE id=6"
    db.query(sqlUpdate, (err,result)  => {
        // Se foi sucedida dá conselog
        console.log(err)

    });

});


//DELETE
app.delete('/api/delete/', (req,res) => {
  
    const nome = req.body.nome_backend
    console.log(nome)
    const sqlDelete = "DELETE FROM users WHERE nome=?"
    db.query(sqlDelete, nome, (err,result)  => {
        // Se foi sucedida dá conselog
        

    });

});




app.listen(3001, () =>{
    console.log('running on port 3001');
});



/*
app.post('/api/login', async (req, res)  => {

    const nome = req.body.nome
    const password = req.body.password

    let sqlPosts = "SELECT * from users"
    let GetPosts = await new Promise((resolve, reject) => db.query(sqlPosts, (err, resultPosts) => {

    if(err){
        reject(err)
    }else{
        resolve(resultPosts)
        console.log(resultPosts)
        res.json(resultPosts)
    }

    }));

})

*/











/*
app.post("/api/login", async (req, res) => {
  const nome = req.body.nome;
  const password = req.body.password;

  // TODO move this to a constants file
  const UNKNOWN_USER = -1;
  const sqlUsers = "SELECT * from users WHERE nome=?";
  let message;
  return new Promise((resolve, reject) =>
    db.query(sqlUsers, nome, (err, result) => {
      if (err) {
        reject(err);
        // TODO send error, best with a error code;
        return res.send(err);
      }

      // Se a base de dados tiver encontrado algum user com aquele nome
      if (result.length !== 0) {
        // Comparar a hash da password introduzida com aquela que está na base de dados
        bcrypt.compare(password, result[0].password, (error, encrypted) => {
          if (error) {
            reject(err);
            // TODO send error, best with a error code;
            return res.json(err);
          }
          if (encrypted) {
            // User existe e credenciais certas
            req.session.user = result;
            console.log(req.session.user);
            message = "User encontrado e credenciais certas";
            resolve(result);
            return res.json(message);
          }
          // User existe mas credenciais erradas
          message = "User encontrado mas credenciais erradas";
          return res.json(message);
        });
      } else {
        // User não existe OOR ITS MAGIC > 1
        reject(err);
        // TODO send error, best with a error code;
        return res.json("User não encontrado");
      }
    })
  );
});
*/

/*
app.get("/api/user", async (req, res) => {
  // get all users with
});

app.post("/api/user", async (req, res) => {
  // create user
});

app.delete("/api/user", async (req, res) => {
  Users.delete(req.params.id);
  // delete user
});

app.patch("/api/user/{$1}", async (req, res) => {
  Users.patch(req.params.id);
  // update user
});
*/




/*
const loginRoute = require("./routes/user/login");
const registerRoute = require("./routes/user/register")
const userRoute = require("./routes/user/general")


app.use("/login", loginRoute);
app.use("/register", )
*/





/*
// Verificar se o user está loggedIn
router.get("/", (req, res) => {
  if (req.session.user) {
    console.log("aqui" + JSON.stringify(req.session.user));
    res.json({ loggedIn: true, user: req.session.user });
  } else {
    res.send({ loggedIn: false });
  }
});
*/


 /*
        const token = jwt.sign({ id }, "secret", { expiresIn: 300 });
        req.session.user = {
          id: id,
          nome: nome_user,
          password: password_user,
          auth: true,
          token: token,
        };
*/



https://www.youtube.com/watch?v=iRORiaLAgaE&t=8736s&ab_channel=TechWithTim





